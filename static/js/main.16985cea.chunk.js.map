{"version":3,"sources":["types/types.js","components/Box.js","actions/gameInteraction.js","components/Board.js","actions/boxesBoard.js","components/Configuration.js","components/PlayerScreen.js","components/GameScreen.js","reducers/boardReducer.js","store/store.js","App.js","index.js"],"names":["types","Box","box","board","turn","disabled","dispatch","useDispatch","onClick","attacked","e","type","payload","attackBox","className","ship","class","id","Board","configKey","useSelector","state","game","boards","playerTurn","configboard","filter","o","console","log","style","repeat","columns","boxesList","map","boardColumns","Configuration","ref","useRef","useEffect","current","value","onChange","event","selectValue","target","selected","PlayerScreen","GameScreen","startedGame","boxesQuant","Swal","fire","title","timer","willClose","clearInterval","display","getRandomElements","list","numElements","sort","Math","random","slice","initialState","letters","split","getBoxesList","numRows","numColumns","rowIdex","columnIndex","push","length","reducers","combineReducers","action","activeBoard","BoxState","attackedBoxesWithShip","boxesWithShip","imageUrl","imageWidth","imageHeight","imageAlt","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","swLocation","navigator","serviceWorker","location","href","includes","register","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.16985cea.chunk.js","sourcesContent":["export const types = {\r\n  boxesBoard: \"[Config] BoxesBoard\",\r\n\r\n  boxStateOnClick: \"[Interaction] BoxStatesOnClick\",\r\n\r\n  startGame: \"[Game] Start game\",\r\n\r\n  reset: \"[Game] Restart game\",\r\n};\r\n","import React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { attackBox } from \"../actions/gameInteraction\";\r\n\r\nexport const Box = ({ box, board, turn, disabled }) => {\r\n  const dispatch = useDispatch();\r\n  const handleBoxClick = (e) => {\r\n    dispatch(attackBox(box, board, turn));\r\n  };\r\n  return (\r\n    <div\r\n      onClick={!box.attacked && !disabled ? handleBoxClick : \"\"}\r\n      className={\r\n        \"box \" + (box.attacked ? (box.ship ? \"attackedBox\" : \"waterBox\") : \" \")\r\n      }\r\n    >\r\n      <span class=\"positionBox\">{box.id}</span>\r\n    </div>\r\n  );\r\n};\r\n","import { types } from \"../types/types\";\r\n\r\nexport const attackBox = (box, board, turn) => {\r\n  return {\r\n    type: types.boxStateOnClick,\r\n    payload: {\r\n      box,\r\n      board,\r\n      turn,\r\n    },\r\n  };\r\n};\r\n\r\nexport const startGame = () => {\r\n  return {\r\n    type: types.startGame,\r\n  };\r\n};\r\n\r\nexport const reset = () => {\r\n  return {\r\n    type: types.reset,\r\n  };\r\n};\r\n","import { useSelector } from \"react-redux\";\r\nimport { Box } from \"./Box\";\r\n\r\nexport const Board = ({ configKey }) => {\r\n  const { boards, playerTurn } = useSelector((state) => state.game);\r\n  const configboard = boards.filter((o) => o.configKey === configKey)[0];\r\n  console.log(playerTurn);\r\n\r\n  // console.log(configboard.columns);\r\n  // console.log(configboard.boxesList);\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <div\r\n          className={\r\n            \"board \" +\r\n            (playerTurn === configKey ? \"boardDisabled\" : \"boardEnabled\")\r\n          }\r\n          style={{\r\n            \"grid-template-columns\": \"1fr \".repeat(configboard.columns),\r\n          }}\r\n        >\r\n          {configboard.boxesList.map((box) => (\r\n            <>\r\n              <Box\r\n                disabled={playerTurn === configKey}\r\n                key={box.id}\r\n                box={box}\r\n                board={configboard}\r\n                turn={playerTurn}\r\n              />\r\n            </>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n","import { types } from \"../types/types\";\r\n\r\nexport const boardColumns = (columns, configKey) => {\r\n  return {\r\n    type: types.boxesBoard,\r\n    payload: {\r\n      columns,\r\n      configKey,\r\n    },\r\n  };\r\n};\r\n","import React, { useEffect, useRef } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { boardColumns } from \"../actions/boxesBoard\";\r\n\r\nexport const Configuration = ({ configKey }) => {\r\n  const dispatch = useDispatch();\r\n  const ref = useRef();\r\n  useEffect(() => {\r\n    dispatch(boardColumns(ref.current.value, configKey));\r\n  }, []);\r\n\r\n  const handleSelectChange = (event) => {\r\n    const selectValue = event.target.value;\r\n    dispatch(boardColumns(selectValue, configKey));\r\n  };\r\n  return (\r\n    <div>\r\n      <div className=\"boardSizeConfig\">\r\n        {/* <h4>Choose a board size:</h4> */}\r\n        <select\r\n          className=\"configuration\"\r\n          ref={ref}\r\n          onChange={handleSelectChange}\r\n        >\r\n          <option selected value=\"4\">\r\n            4 columns\r\n          </option>\r\n          <option value=\"6\">6 columns</option>\r\n          <option value=\"8\">8 columns</option>\r\n        </select>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Board } from \"./Board\";\r\nimport { Configuration } from \"./Configuration\";\r\n\r\nexport const PlayerScreen = ({ configKey }) => {\r\n  // console.log(configKey);\r\n  return (\r\n    <div className=\"playerScreen\">\r\n      <div className=\"configKey\">\r\n        <h4>{configKey}</h4>\r\n      </div>\r\n\r\n      {/* <Configuration configKey={configKey} /> */}\r\n      <Board configKey={configKey} />\r\n    </div>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { PlayerScreen } from \"./PlayerScreen\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport Swal from \"sweetalert2\";\r\nimport { startGame, reset } from \"../actions/gameInteraction\";\r\nimport { Configuration } from \"./Configuration\";\r\n\r\nexport const GameScreen = () => {\r\n  const { startedGame } = useSelector((state) => state.game);\r\n  const { boards } = useSelector((state) => state.game);\r\n  console.log(boards[0].boxesQuant);\r\n\r\n  useEffect(() => {\r\n    if (startedGame) {\r\n      Swal.fire({\r\n        title:\r\n          \"Sink \" + boards[0].boxesQuant * 0.25 + \" opponent's ships to win\",\r\n        timer: 6000,\r\n        willClose: () => {\r\n          clearInterval();\r\n        },\r\n      });\r\n    }\r\n  }, [startedGame]);\r\n  const dispatch = useDispatch();\r\n  const handleClickStart = () => {\r\n    dispatch(startGame());\r\n  };\r\n  const handleClickBackButton = () => {\r\n    dispatch(reset());\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"title\">\r\n        {\" \"}\r\n        <h1> BattleShip Game </h1>\r\n        <button\r\n          style={{ display: startedGame ? \"inline-block\" : \"none\" }}\r\n          className=\"backButton\"\r\n          onClick={handleClickBackButton}\r\n        >\r\n          Back\r\n        </button>\r\n      </div>\r\n      {startedGame ? (\r\n        <>\r\n          <PlayerScreen configKey={\"Player 1\"} />\r\n          <PlayerScreen configKey={\"Player 2\"} />{\" \"}\r\n        </>\r\n      ) : (\r\n        <div className=\"container\">\r\n          {\" \"}\r\n          <div className=\"chooseboard\">\r\n            <h4>Customize your board size:</h4>\r\n          </div>\r\n          <div className=\"row justify-content-md-center\">\r\n            <div className=\"col-sm-12 content-left\">\r\n              <div className=\"content-left\">\r\n                <div className=\"configKey\">\r\n                  <h4>Player 1</h4>\r\n                </div>{\" \"}\r\n                <Configuration configKey={\"Player 1\"} />\r\n              </div>\r\n            </div>\r\n            <div className=\"col-sm-12 content-right\">\r\n              <div className=\"content-right\"></div>\r\n              <div className=\"configKey\">\r\n                <h4>Player 2</h4>\r\n              </div>{\" \"}\r\n              <Configuration configKey={\"Player 2\"} />\r\n            </div>\r\n          </div>\r\n          <div className=\"row justify-content-md-center\">\r\n            {\" \"}\r\n            <div className=\"col-sm-12 content-right\">\r\n              <button\r\n                className={\"startButton\" + (startedGame ? +\"hidden\" : \" \")}\r\n                onClick={handleClickStart}\r\n              >\r\n                Start Game\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n      <div className={startedGame ? \"hidden\" : \" \"}>\r\n        <div class=\"ocean\">\r\n          <div class=\"wave\"></div>\r\n          <div class=\"wave\"></div>\r\n        </div>\r\n      </div>\r\n    </>\r\n    // <div className=\"ocean\">\r\n    //   <div className=\"title\">\r\n    //     {\" \"}\r\n    //     <h1> BattleShip Game </h1>\r\n    //   </div>\r\n\r\n    // <button\r\n    //   //visibility={gameStarted ? \"hidden\" : \" \"}\r\n    //   className={gameStarted ? \"hidden\" : \" \"}\r\n    //   onClick={handleClickStart}\r\n    // >\r\n    //   Start Game\r\n    // </button>\r\n\r\n    //   <div class=\"wave\"></div>\r\n    //   <div class=\"wave\"></div>\r\n\r\n    // {gameStarted && (\r\n    //   <>\r\n    //     {\" \"}\r\n    //     <PlayerScreen configKey={\"Player 1\"} />\r\n    //     <PlayerScreen configKey={\"Player 2\"} />{\" \"}\r\n    //   </>\r\n    // )}\r\n    // </div>\r\n\r\n    // <div className=\"gameScreen\">\r\n    //   <div className=\"title\">\r\n    //     {\" \"}\r\n    //     <h1> BattleShip Game </h1>\r\n    //   </div>\r\n\r\n    //   <button\r\n    //     //visibility={gameStarted ? \"hidden\" : \" \"}\r\n    //     className={gameStarted ? \"hidden\" : \" \"}\r\n    //     onClick={handleClickStart}\r\n    //   >\r\n    //     Start Game\r\n    //   </button>\r\n\r\n    //   {gameStarted && (\r\n    //     <>\r\n    //       {\" \"}\r\n    //       <PlayerScreen configKey={\"Player 1\"} />\r\n    //       <PlayerScreen configKey={\"Player 2\"} />{\" \"}\r\n    //     </>\r\n    //   )}\r\n    // </div>\r\n  );\r\n};\r\n","import Swal from \"sweetalert2\";\r\nimport { types } from \"../types/types\";\r\nfunction getRandomElements(list, numElements) {\r\n  return [...list]\r\n    .sort(() => (Math.random() > 0.5 ? 1 : -1))\r\n    .slice(0, numElements);\r\n}\r\n\r\nconst boards = [\r\n  {\r\n    columns: 0,\r\n    configKey: \"Player 1\",\r\n    boxesList: [],\r\n    boxesQuant: 0,\r\n  },\r\n  {\r\n    columns: 0,\r\n    configKey: \"Player 2\",\r\n    boxesList: [],\r\n    boxesQuant: 0,\r\n  },\r\n];\r\nconst initialState = {\r\n  boards: boards,\r\n  playerTurn: getRandomElements(boards, 1)[0].configKey, //player turn random at start\r\n  startedGame: false,\r\n};\r\n\r\nexport const boardReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case types.startGame:\r\n      return {\r\n        ...state,\r\n        startedGame: true,\r\n      };\r\n    case types.boxesBoard:\r\n      const boxesQuant = action.payload.columns * action.payload.columns;\r\n      let numColumns = action.payload.columns;\r\n      let numRows = action.payload.columns;\r\n      let boxesList = getBoxesList(numRows, numColumns);\r\n\r\n      return {\r\n        ...state,\r\n        boards: [\r\n          ...state.boards.filter(\r\n            (o) => o.configKey !== action.payload.configKey && o != null\r\n          ),\r\n\r\n          {\r\n            columns: action.payload.columns,\r\n            configKey: action.payload.configKey,\r\n            boxesList: boxesList,\r\n            boxesQuant: boxesQuant,\r\n          },\r\n        ],\r\n      };\r\n\r\n    case types.boxStateOnClick:\r\n      const activeBoard = state.boards.filter(\r\n        (o) => o.configKey === action.payload.board.configKey\r\n      )[0];\r\n\r\n      const BoxState = activeBoard.boxesList.filter(\r\n        (o) => o.id === action.payload.box.id\r\n      )[0];\r\n\r\n      BoxState.attacked = true;\r\n\r\n      const attackedBoxesWithShip = activeBoard.boxesList.filter(\r\n        (o) => o.ship === true && o.attacked === true\r\n      );\r\n\r\n      const boxesWithShip = activeBoard.boxesList.filter(\r\n        (o) => o.ship === true\r\n      );\r\n\r\n      if (boxesWithShip.length === attackedBoxesWithShip.length) {\r\n        Swal.fire({\r\n          title: state.playerTurn + \" wins!\",\r\n          imageUrl: \"https://picsum.photos/id/828/350/250\",\r\n          imageWidth: 350,\r\n          imageHeight: 250,\r\n          imageAlt: \"Custom image\",\r\n        });\r\n      }\r\n      switch (state.playerTurn) {\r\n        case \"Player 1\":\r\n          state.playerTurn = \"Player 2\";\r\n          break;\r\n        case \"Player 2\":\r\n          state.playerTurn = \"Player 1\";\r\n          break;\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n      };\r\n\r\n    case types.reset:\r\n      return {\r\n        ...state,\r\n        startedGame: false,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst abc = \"A B C D E F G H I J K L M N O P Q\";\r\nconst letters = abc.split(\" \");\r\n\r\nfunction getBoxesList(numRows, numColumns) {\r\n  let boxesList = [];\r\n\r\n  for (let rowIdex = 0; rowIdex < numRows; rowIdex++) {\r\n    for (let columnIndex = 0; columnIndex < numColumns; columnIndex++) {\r\n      let box = {\r\n        id: letters[columnIndex] + (rowIdex + 1),\r\n        ship: false,\r\n        attacked: false,\r\n      };\r\n      boxesList.push(box);\r\n    }\r\n  }\r\n\r\n  const randomBoxes = getRandomElements(boxesList, boxesList.length * 0.25);\r\n  randomBoxes.map((o) => (o.ship = true));\r\n  return boxesList;\r\n}\r\n","import { createStore, combineReducers } from \"redux\";\r\nimport { boardReducer } from \"../reducers/boardReducer\";\r\n\r\nconst reducers = combineReducers({\r\n  game: boardReducer,\r\n});\r\n\r\nexport const store = createStore(\r\n  reducers,\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);\r\n","import { Provider } from \"react-redux\";\r\nimport { GameScreen } from \"./components/GameScreen\";\r\n\r\nimport \"./index.css\";\r\nimport { store } from \"./store/store\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Provider store={store}>\r\n      <GameScreen />\r\n    </Provider>\r\n  );\r\n}\r\n\r\nvar swLocation = \"./sw.js\";\r\nif (navigator.serviceWorker) {\r\n  var url = window.location.href;\r\n\r\n  if (url.includes(\"localhost\")) {\r\n    swLocation = \"./BattleShipGame/sw.js\";\r\n  }\r\n  navigator.serviceWorker.register(swLocation);\r\n}\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <App />,\n\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}